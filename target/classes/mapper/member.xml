<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bitcamp.mapper.MemberMapper">
	<parameterMap id="map" type="java.util.HashMap"/>
	<parameterMap id="list" type="java.util.ArrayList"/>
	
	<select id="emailcheck" parameterType="String" resultType="int">
		select count(*) 
		from member 
		where email = #{email}
	</select>
	
	<insert id="memberAdd" parameterType="com.bitcamp.dto.MemberDTO">
		<if test='birth != "404" and phone != "404"'>
			insert into member(email, name, password, phone, birth)
			values(#{email}, #{name}, #{password}, #{phone}, #{birth})
		</if>
		<if test='birth == "404" and phone == "404"'>
			insert into member(email, name, password)
			values(#{email}, #{name}, #{password})
		</if>
		<if test='birth == "404" and phone != "404"'>
			insert into member(email, name, password, phone)
			values(#{email}, #{name}, #{password}, #{phone	})
		</if>
		<if test='birth != "404" and phone == "404"'>
			insert into member(email, name, password, birth)
			values(#{email}, #{name}, #{password}, #{birth})
		</if>
	</insert>
	
	<select id="address" parameterType="int" resultType="com.bitcamp.dto.AddressDTO">
		select * from address where no = #{no} and default_addr = 1
	</select>
	
	<update id="addrssupdate1" parameterType="com.bitcamp.dto.AddressDTO">
		update address
		set default_addr = 0
		where no = #{no} 
		and alias != #{alias} 
		and addrDetail != #{addrDetail}
		and roadaddrPart1 != '${roadaddrPart1}' 
	</update>
	<update id="addrssupdate2" parameterType="com.bitcamp.dto.AddressDTO">
		update address
		set default_addr = 1
		where no = #{no} 
		and alias = #{alias} 
		and addrDetail = #{addrDetail}
		and roadaddrPart1 = '${roadaddrPart1}' 
	</update>
	<insert id="supportinsert" parameterType="com.bitcamp.dto.SupportDTO">
		insert into support(no, option_no) values(#{no}, #{option_no})
	</insert>
	
	<insert id="addressInsert" parameterType="com.bitcamp.dto.AddressDTO">
		insert into address(no, address_name, address_photo, alias, zipno, roadaddrPart1, roadaddrPart2, jibunaddr, addrDetail, default_addr) 
		values(#{no}, #{address_name}, #{address_photo}, #{alias}, #{zipno}, #{roadaddrPart1}, #{roadaddrPart2}, #{jibunaddr}, #{addrDetail}, 0)
	</insert>
	
	<select id="addrlist" parameterType="int" resultType="com.bitcamp.dto.AddressDTO">
		select * from address where no = #{no}
	</select>
	
	<select id="memberinfo" parameterType="String" resultType="com.bitcamp.dto.MemberDTO">
		select * from member where email = #{email}
	</select>
	
	<select id="projectinfo" parameterType="int" resultType="com.bitcamp.dto.ProjectDTO">
		select p.*	from `option` o join project p
		on o.project_no = p.project_no
		where option_no = #{option_no}
	</select>
	
	<resultMap type="hashMap" id="talk">
		<result column="talk_title" property="talk_title" />
		<result column="name" property="name" />
		<result column="email" property="email" />
		<result column="talk_date" property="talk_date" />
		<result column="talk_status" property="talk_status" />
	</resultMap>
	
	<select id="recipientcount" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from member m join talk t 
		on t.no = m.no
		<where>
			recipient = #{no} and talk_keep = #{talk_keep}
			<if test="search != '' || search != null">
				<choose>
					<when test="'talk_title'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
					</when>
					<when test="'talk'.equals(kind)">
						and talk like CONCAT('%',#{search},'%')
					</when>
					<when test="'titlecontent'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
			    		or talk like CONCAT('%',#{search},'%')
					</when>
					<otherwise>
						and name like CONCAT('%',#{search},'%')
					</otherwise>
				</choose>
			</if>
		</where>
	</select>
	
	<!-- 받은 or 보관함 쪽지 리스트 -->
	<select id="recipientlist" parameterType="java.util.HashMap" resultMap="talk">
		select talk_no, talk_title, name, email, talk_status, talk_keep, talk_date
		from member m join 
			(select talk_title, t.no, talk_status, talk_no, talk_keep, talk,
				case date_format(talk_date, "%m-%d")
					when date_format(now(), "%m-%d") then date_format(talk_date, "%T")
				else date_format(talk_date, "%m-%d")
				end talk_date
			from talk t join member m
			on t.no = m.no
			where recipient = #{no} and talk_keep = #{talk_keep}) t
		on m.no = t.no
		<where>
			<if test="search != '' || search != null">
				<choose>
					<when test="'talk_title'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
					</when>
					<when test="'talk'.equals(kind)">
						and talk like CONCAT('%',#{search},'%')
					</when>
					<when test="'titlecontent'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
			    		or talk like CONCAT('%',#{search},'%')
					</when>
					<otherwise>
						and name like CONCAT('%',#{search},'%')
					</otherwise>
				</choose>
			</if>
		</where>
		order by talk_no desc
		limit #{startRow}, #{pagePerSize}
	</select>
	
	<!-- 보낸 쪽지 카운트 -->
	<select id="sentcount" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from member m join talk t
		on m.no = t.recipient
		<where>
			t.no = #{no}
			and talk_deletesenttalk = 0
			<if test="search != '' || search != null">
				<choose>
					<when test="'talk_title'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
					</when>
					<when test="'talk'.equals(kind)">
						and talk like CONCAT('%',#{search},'%')
					</when>
					<when test="'titlecontent'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
			    		or talk like CONCAT('%',#{search},'%')
					</when>
					<otherwise>
						and name like CONCAT('%',#{search},'%')
					</otherwise>
				</choose>
			</if>
		</where>
	</select>
	
	<resultMap type="hashMap" id="sendtalk">
		<result column="talk_no" property="talk_no" />
		<result column="talk_title" property="talk_title" />
		<result column="talk_date" property="talk_date" />
		<result column="talk_status" property="talk_status" />
		<result column="recipient" property="recipient" />
		<result column="name" property="name" />
	</resultMap>
	<!-- 보낸 쪽지 리스트 -->
	<select id="sentlist" parameterType="java.util.HashMap" resultMap="sendtalk">
		select talk_no, talk_title, talk, talk_img, talk_date, recipient, name,
			case date_format(talk_status, "%m-%d")
				when date_format(now(), "%m-%d") then date_format(talk_status, "%T")
			else date_format(talk_status, "%m-%d")
			end talk_status
		from member m join talk t
		on m.no = t.recipient
		<where>
		t.no = #{no}
		and talk_deletesenttalk = 0
			<if test="search != '' || search != null">
				<choose>
					<when test="'talk_title'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
					</when>
					<when test="'talk'.equals(kind)">
						and talk like CONCAT('%',#{search},'%')
					</when>
					<when test="'titlecontent'.equals(kind)">
						and talk_title like CONCAT('%',#{search},'%')
			    		or talk like CONCAT('%',#{search},'%')
					</when>
					<otherwise>
						and name like CONCAT('%',#{search},'%')
					</otherwise>
				</choose>
			</if>
		</where>
		order by talk_no desc
		limit #{startRow}, #{pagePerSize}
	</select>
	
	<!-- 보낸 쪽지 삭제 -->
	<update id="deletesent">
		update talk set talk_deletesenttalk = 1
		where talk_no in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>
	
	<insert id="talksend" parameterType="com.bitcamp.dto.TalkDTO">
		insert into talk(talk_title, talk, recipient, no) 
		values(#{talk_title}, #{talk}, #{recipient}, #{no})
	</insert>
	
	<resultMap type="hashMap" id="taildetails">
		<result column="talk_no" property="talk_no" />
		<result column="talk_title" property="talk_title" />
		<result column="talk" property="talk" />
		<result column="talk_date" property="talk_date" />
		<result column="name" property="name" />
	</resultMap>
	
	<!-- 쪽지 상세 내용 -->
	<select id="talkdetail" parameterType="int" resultMap="taildetails">
		select talk_no, talk_title, talk, talk_img, date_format(talk_date, "%Y-%m-%d %T") talk_date, name, talk_keep, t.no as no
		from talk t join member m
		on t.no = m.no
		where talk_no = #{talk_no}
	</select>
	
	<!-- 쪽지 읽음 처리 -->
	<update id="talkstatus" parameterType="int">
		update talk set talk_status = now()
		where talk_no = #{talk_no}
	</update>
	
	<!-- 회원번호로 회원 찾기 -->
	<select id="nosearch" parameterType="com.bitcamp.dto.MemberDTO" resultType="com.bitcamp.dto.MemberDTO">
		select * from member where no = #{no}
	</select>
	
	
	<!-- 읽지 않은 쪽지 갯수 -->
	<select id="unread" parameterType="com.bitcamp.dto.TalkDTO" resultType="int">
		select count(*) from talk t join member m
		on t.no = m.no
		where recipient = #{no}
		and talk_keep = #{talk_keep}
		and talk_status is null
	</select>
	
	<!-- 쪽지 보관하기 -->
	<update id="keep" parameterMap="list">
		update talk set talk_keep = 1
		where talk_no in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>
	
	<!-- 쪽지 일반(보관함에서 꺼내기)으로 보내기 -->
	<update id="move" parameterMap="list">
		update talk set talk_keep = 0
		where talk_no in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>
	
	<!-- 쪽지 보낼 때 이메일, 이름 검색 -->
	<select id="idsearch" parameterType="String" resultType="com.bitcamp.dto.MemberDTO">
		select * 
		from member 
		where name like CONCAT('%',#{search},'%')  
		or email like CONCAT('%',#{search},'%')
	</select>
	
	<!-- 모두 읽기 -->
	<update id="allread" parameterType="com.bitcamp.dto.TalkDTO">
		update talk set talk_status = now()
		where recipient = #{no}
		and talk_keep = #{talk_keep}
		and talk_status is null
	</update>
	
	<!-- 쪽지 삭제 -->
	<delete id="talkdelete">
		delete from talk
		where talk_no in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>
	
	<update id="updateList" parameterMap="list">
		<foreach separator=";" close="; end ; " open="declare begin" collection="list" item="item"> 
			update pitem set price = price-#{item.value, jdbcType=NUMERIC} 
			where item = #{item.key, jdbcType=NUMERIC} 
		</foreach>
	</update>
	
	<resultMap type="com.bitcamp.dto.MemberDTO" id="memberMap">
		<result property="no" column="no" />
		<result property="email" column="email" />
		<result property="password" column="password" />
		<result property="enabled" column="enabled" />
		<collection property="authList" resultMap="authMap" />
	</resultMap>

	<resultMap type="com.bitcamp.dto.AuthorityDTO" id="authMap">
		<result property="no" column="no" />
		<result property="auth" column="auth" />
	</resultMap>
	
	<select id="maxno" resultType="int">
		select max(no)+1 from member
	</select>
	
	<insert id="grantedAuth" parameterType="com.bitcamp.dto.MemberDTO">
<!-- 		insert into authority (no, auth) values 
		<foreach collection="authList" item="item" open="(" separator="," close=")">
			#{item.no}, #{item.auth}
		</foreach> -->
		
		insert into authority values (#{no}, 'ROLE_MEMBER')
		
	</insert>

	<select id="getUserById" parameterType="String"
		resultMap="memberMap">
		select member.no, email, password, enabled, auth
		from member join
		authority on member.no = authority.no
		where email = (select email from member where email = #{email})
	</select>
	
	<update id="changeAuth" parameterType="String">
		update authority join member on authority.no = member.no set auth = 'ROLE_MANAGER'
		where email = #{email}
	</update>

</mapper>
