<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bitcamp.mapper.AdminMapper">

	<parameterMap type="java.util.HashMap" id="hashmap" />

	<!-- 펀딩 회원 관리 -->
	
	<!-- 회원 번호, 이름, 이메일, 펀딩 이름, 달성 금액 / 목표 금액, 성공 여부 / 달성률, 계약서 -->

	<resultMap type="hashmap" id="mdto">
		<result property="no" column="no" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="project_title" column="project_title" />
		<result property="sumop" column="option_price" />
		<result property="ntargetprice" column="targetprice" />
		<result property="reachper" column="targetprice" />
		<result property="project_contract" column="project_contract" />
		<result property="arating" column="rating" />
	</resultMap>
	
	<!-- 펀딩 회원 개수 - 검색용 -->
	<select id="fmember_totalCount" resultType="int"
		parameterMap="hashmap">
		select count(project_no)
		from project join member on project.no = member.no
		join authority on member.no = authority.no
		<where>
			and auth = 'ROLE_MANAGER'
			<if test="fmember_search!=null and fmember_search!=''">
				and name like CONCAT('%',#{fmember_search},'%')
			</if>
		</where>
	</select>
	
	<!-- 펀딩 회원 리스트 -->
	<select id="admin_fmember" resultMap="mdto" parameterMap="hashmap">
	select m.no, name, email, project_title, targetprice as ntargetprice, 
      project_contract, 
      round(avg(rating), 1) as arating, sumop, reachper
		from support s join `option` o
  		 on s.option_no = o.option_no
		right join project p
 		  on p.project_no = o.project_no
		join member m
  		 on m.no = p.no
		join authority a
  		 on a.no = m.no
		left join reply r
  		 on r.project_no = p.project_no
		join (select  sum(option_price) as sumop, project.project_no, round(sum(option_price) / targetprice * 100, 2) as reachper
     		 from support join `option` on support.option_no = `option`.option_no
     		 right join project on project.project_no = `option`.project_no
     		 join member on member.no = project.no
     		 join authority on authority.no = member.no
 		  where auth = 'ROLE_MANAGER'
    		  group by project.project_no
     		 order by project.project_no) a
     		 on a.project_no = p.project_no
		<where>
		auth = 'ROLE_MANAGER'
			<if test="fmember_search!=null and fmember_search!=''">
				and name like CONCAT('%',#{fmember_search},'%')
			</if>
		</where>
		group by p.project_no
		limit #{startRow}, #{pagePerSize}
	</select>
	
	<!-- 통계 자료 -->
	
	<!-- 이름 가져오기 -->
	<select id="getName" resultType="String" parameterType="String">
		select name from member where no = (select no from member where email = #{email})
	</select>
	
	<!-- 성공 횟수 -->
	<select id="successCount" resultType="int" parameterType="String">
		select count(d.dal)
		from (select project.project_no, ifnull(round(sum(option_price) / targetprice * 100, 2), 0) as dal
		from support join `option` on support.option_no = `option`.option_no
		right join project on project.project_no = `option`.project_no
		join member on member.no = project.no
		join authority on authority.no = member.no
		where auth = 'ROLE_MANAGER' and member.no = (select no from member where email = #{email})
		group by project.project_no) as d
		where d.dal > 100
	</select>
	
	<!-- 총 프로젝트 등록 횟수 -->
	<select id="theNumbersOfRegiProject" resultType="int" parameterType="String">
		select count(project.project_no)
		from project join member on project.no = member.no
		join authority on authority.no = member.no
		where auth = 'ROLE_MANAGER' and member.no = (select no from member where email = #{email})
	</select>
	
	<!-- 평균 달성률 -->
	<select id="avgdal" resultType="float" parameterType="String">
		select round(avg(d.dal), 2)
		from (select project.project_no, ifnull(round(sum(option_price) / targetprice * 100, 2), 0) as dal
		from support join `option` on support.option_no = `option`.option_no
		right join project on project.project_no = `option`.project_no
		join member on member.no = project.no
		join authority on authority.no = member.no
		where auth = 'ROLE_MANAGER' and member.no = (select no from member where email = #{email})
		group by project.project_no) as d
	</select>
	
	<!-- 평균 평점 -->
	<select id="avgRating" resultType="float" parameterType="String">
		select round(avg(ravg), 1)
		from (
		select ifnull(round(avg(rating), 1), 0) as ravg
		from project join member on project.no = member.no
		join authority on authority.no = member.no
		left join reply on reply.project_no = project.project_no
		where auth = 'ROLE_MANAGER' and member.no = (select no from member where email = #{email})
		group by project.project_no ) as t
	</select>
	
	<!-- Excel용 Full List -->
	<select id="admin_Allfmember" resultMap="mdto">
	select m.no, name, email, project_title, targetprice as ntargetprice, 
      project_contract, 
      round(avg(rating), 1) as arating, sumop, reachper
		from support s join `option` o
  		 on s.option_no = o.option_no
		right join project p
 		  on p.project_no = o.project_no
		join member m
  		 on m.no = p.no
		join authority a
  		 on a.no = m.no
		left join reply r
  		 on r.project_no = p.project_no
		join (select  sum(option_price) as sumop, project.project_no, round(sum(option_price) / targetprice * 100, 2) as reachper
     		 from support join `option` on support.option_no = `option`.option_no
     		 right join project on project.project_no = `option`.project_no
     		 join member on member.no = project.no
     		 join authority on authority.no = member.no
 		  where auth = 'ROLE_MANAGER'
    		  group by project.project_no
     		 order by project.project_no) a
     		 on a.project_no = p.project_no
		where auth = 'ROLE_MANAGER'
		group by p.project_no
	</select>	
	
	
	<!-- 총 프로젝트 개수 - 검색용 -->
	<select id="sproject_totalCount" resultType="int"
		parameterMap="hashmap">
		select count(project_no) from project
		<where>
			and project_no not in (1, 2, 3, 1001, 1002, 1003, 2001, 2002, 2003, 2004, 3001, 4001, 4002)
			<if test="sproject_search!=null and sproject_search!=''">
				and project_title like CONCAT('%',#{sproject_search},'%')
			</if>
		</where>
	</select>
	
	<!-- 펀딩 현황 목록 -->
	<select id="admin_sproject" resultType="com.bitcamp.dto.ProjectDTO"  parameterMap="hashmap">
		select project_no, project_title, project_status, no from project 
		<where>
			and project_no not in (1, 2, 3, 1001, 1002, 1003, 2001, 2002, 2003, 2004, 3001, 4001, 4002)
			<if test="sproject_search!=null and sproject_search!=''">
				and project_title like CONCAT('%',#{sproject_search},'%')
			</if>
		</where>
		limit #{startRow}, #{pagePerSize}
	</select>
	
	<!-- pdf -->
	<select id="getPdf" parameterType="int" resultType="String">
	select project_contents from project where project_no=#{project_no}
	</select>
	
	<!-- 승인 시 권한 변경 -->
	<update id="agree" parameterType="int">
		update authority set auth = 'ROLE_MANAGER' 
		where no = (select member.no from member join project on member.no = project.no where project_no = #{project_no})
	</update>
	
	<!-- 승인 시 프로젝트 상태 변경 (1로) -->
	<update id="psChange" parameterType="int">
		update project set project_status = 1 where project_no = #{project_no}
	</update>
	
	<!-- 거절 시 프로젝트 상태 변경 (2로) -->
	<update id="disagree" parameterType="int">
		update project set project_status = 2 where project_no = #{project_no}
	</update>
	
	<!-- Excel용 Full List -->
	<select id="admin_Allsproject" resultType="com.bitcamp.dto.ProjectDTO">
		select project_no, project_title, project_status from project
		where project_no not in (1, 2, 3, 1001, 1002, 1003, 2001, 2002, 2003, 2004, 3001, 4001, 4002)
	</select>
	
	<!-- 거절 된 프로젝트 지워주기 (매주 금요일 저녁 6시에 삭제) -->
	<delete id="deleteDisagree">
		delete from project where project_status = 2
	</delete>
	
	<!-- 남은 날이 -1보다 작으면 지난 프로젝트로 변경 (매일 밤 11시 59분에 변경) -->
	<update id="updateStatus">
		<![CDATA[update project set project_status = 3 where (to_days(enddate) - to_days(now())) < -1]]>
	</update>
		
	<!-- 고객 문의 -->
	
	<resultMap type="hashmap" id="adcsdto">
	<result column="service_no" property="service_no" />
	<result column="service_title" property="service_title" />
	<result column="name" property="name" />
	<result column="question_no" property="question_no" />
	<result column="service_contents" property="service_contents" />
	<result column="service_reply" property="service_reply" />
	</resultMap>
	
	<select id="adminCS" resultMap="adcsdto">
		select service_no, service_title, name, question_no, service_contents, service_reply
		from service join member on service.no = member.no
		<where>
			and service_reply is null
		</where>
	</select>
	
	<!-- 고객 문의 답변 작성 -->
	<update id="answerCS" parameterType="java.util.HashMap">
		update service set service_reply = #{service_reply} where service_no = #{service_no}
	</update>

</mapper>